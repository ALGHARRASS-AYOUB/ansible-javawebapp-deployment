---
#- name: create the tomcat folder
#  file:
#    path: "{{ tomcat_folder }}" # required. Path to the file being managed.
#    state: directory # not required. choices: absent;directory;file;hard;link;touch. If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change. If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions. If C(file), without any other options this works mostly as a 'stat' and will return the current state of C(path). Even with other options (i.e C(mode)), the file will be modified but will NOT be created if it does not exist; see the C(touch) value or the M(copy) or M(template) module if you want that behavior. If C(hard), the hard link will be created or changed. If C(link), the symbolic link will be created or changed. If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).
#    mode: 0755  # not required. The permissions the resulting file or directory should have. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)). As of Ansible 2.6, the mode may also be the special string C(preserve). When set to C(preserve) the file will be given the same permissions as the source file.
#    owner: "{{ tomcat_user }}" # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
#    group: "{{ tomcat_user }}" # not required. Name of the group that should own the file/directory, as would be fed to I(chown).


- name: downlaod tomcat package
  get_url:
    url: "{{ tomcat_url }}" # required. HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path
    dest: "{{ tomcat_download_dest }}" # required. Absolute path of where to download the file to. If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect. If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) option), but replaced only if the contents changed..


- name: Extract tomcat archive
  unarchive:
    src: "{{ tomcat_download_dest }}"
    dest: "{{ tomcat_folder }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: "{{ tomcat_folder }}bin"

# Copying the tomcat template file to the destination node
- name: Copy tomcat service file
  template:
    src: "{{ tomcat_service_template }}"
    dest: "{{ tomcat_service }}"
    mode: 0774
  when: ansible_service_mgr == "{{ system_daemon_os }}"
  become: yes
  become_method: sudo
#  notify: start_tomcat

- name: enable and start tomcat
  service: 
    daemon_reload: yes
    name: tomcat
    state: started
    enabled: yes
  when: ansible_service_mgr == "{{ system_daemon_os }}"
